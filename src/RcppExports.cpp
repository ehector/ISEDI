// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// matrix_inv
arma::mat matrix_inv(const arma::mat& X);
RcppExport SEXP _LDWTL_matrix_inv(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_inv(X));
    return rcpp_result_gen;
END_RCPP
}
// binom_ll_2
double binom_ll_2(const arma::vec& par, const arma::vec& y_2, const arma::mat& X_2, const arma::vec& Z_2);
RcppExport SEXP _LDWTL_binom_ll_2(SEXP parSEXP, SEXP y_2SEXP, SEXP X_2SEXP, SEXP Z_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_2(y_2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_2(X_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Z_2(Z_2SEXP);
    rcpp_result_gen = Rcpp::wrap(binom_ll_2(par, y_2, X_2, Z_2));
    return rcpp_result_gen;
END_RCPP
}
// binom_ll_2_deriv
arma::vec binom_ll_2_deriv(const arma::vec& par, const arma::vec& y_2, const arma::mat& X_2, const arma::vec& Z_2);
RcppExport SEXP _LDWTL_binom_ll_2_deriv(SEXP parSEXP, SEXP y_2SEXP, SEXP X_2SEXP, SEXP Z_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_2(y_2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_2(X_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Z_2(Z_2SEXP);
    rcpp_result_gen = Rcpp::wrap(binom_ll_2_deriv(par, y_2, X_2, Z_2));
    return rcpp_result_gen;
END_RCPP
}
// binom_KLdiv
double binom_KLdiv(const arma::vec& par, const arma::vec& hat_beta_1, const arma::vec& y_1, const arma::mat& X_1, const arma::vec& hat_eta_1, const arma::vec& hat_mu_1);
RcppExport SEXP _LDWTL_binom_KLdiv(SEXP parSEXP, SEXP hat_beta_1SEXP, SEXP y_1SEXP, SEXP X_1SEXP, SEXP hat_eta_1SEXP, SEXP hat_mu_1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hat_beta_1(hat_beta_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_1(y_1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_1(X_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hat_eta_1(hat_eta_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hat_mu_1(hat_mu_1SEXP);
    rcpp_result_gen = Rcpp::wrap(binom_KLdiv(par, hat_beta_1, y_1, X_1, hat_eta_1, hat_mu_1));
    return rcpp_result_gen;
END_RCPP
}
// binom_KLdiv_deriv
arma::vec binom_KLdiv_deriv(const arma::vec& par, const arma::vec& hat_beta_1, const arma::vec& y_1, const arma::mat& X_1, const arma::vec& hat_eta_1, const arma::vec& hat_mu_1);
RcppExport SEXP _LDWTL_binom_KLdiv_deriv(SEXP parSEXP, SEXP hat_beta_1SEXP, SEXP y_1SEXP, SEXP X_1SEXP, SEXP hat_eta_1SEXP, SEXP hat_mu_1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hat_beta_1(hat_beta_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_1(y_1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_1(X_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hat_eta_1(hat_eta_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hat_mu_1(hat_mu_1SEXP);
    rcpp_result_gen = Rcpp::wrap(binom_KLdiv_deriv(par, hat_beta_1, y_1, X_1, hat_eta_1, hat_mu_1));
    return rcpp_result_gen;
END_RCPP
}
// binom_min_func
double binom_min_func(const arma::vec& par, const arma::vec& hat_beta_1, const arma::mat& X_1, const arma::mat& X_2, const arma::vec& y_1, const arma::vec& y_2, const arma::vec& Z_2, const arma::vec& hat_eta_1, const arma::vec& hat_mu_1, const int& n_1, const int& n_2, const double& lambda);
RcppExport SEXP _LDWTL_binom_min_func(SEXP parSEXP, SEXP hat_beta_1SEXP, SEXP X_1SEXP, SEXP X_2SEXP, SEXP y_1SEXP, SEXP y_2SEXP, SEXP Z_2SEXP, SEXP hat_eta_1SEXP, SEXP hat_mu_1SEXP, SEXP n_1SEXP, SEXP n_2SEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hat_beta_1(hat_beta_1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_1(X_1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_2(X_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_1(y_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_2(y_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Z_2(Z_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hat_eta_1(hat_eta_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hat_mu_1(hat_mu_1SEXP);
    Rcpp::traits::input_parameter< const int& >::type n_1(n_1SEXP);
    Rcpp::traits::input_parameter< const int& >::type n_2(n_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(binom_min_func(par, hat_beta_1, X_1, X_2, y_1, y_2, Z_2, hat_eta_1, hat_mu_1, n_1, n_2, lambda));
    return rcpp_result_gen;
END_RCPP
}
// binom_min_func_deriv
arma::vec binom_min_func_deriv(const arma::vec& par, const arma::vec& hat_beta_1, const arma::mat& X_1, const arma::mat& X_2, const arma::vec& y_1, const arma::vec& y_2, const arma::vec& Z_2, const arma::vec& hat_eta_1, const arma::vec& hat_mu_1, const int& n_1, const int& n_2, const double& lambda);
RcppExport SEXP _LDWTL_binom_min_func_deriv(SEXP parSEXP, SEXP hat_beta_1SEXP, SEXP X_1SEXP, SEXP X_2SEXP, SEXP y_1SEXP, SEXP y_2SEXP, SEXP Z_2SEXP, SEXP hat_eta_1SEXP, SEXP hat_mu_1SEXP, SEXP n_1SEXP, SEXP n_2SEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hat_beta_1(hat_beta_1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_1(X_1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_2(X_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_1(y_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y_2(y_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Z_2(Z_2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hat_eta_1(hat_eta_1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type hat_mu_1(hat_mu_1SEXP);
    Rcpp::traits::input_parameter< const int& >::type n_1(n_1SEXP);
    Rcpp::traits::input_parameter< const int& >::type n_2(n_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(binom_min_func_deriv(par, hat_beta_1, X_1, X_2, y_1, y_2, Z_2, hat_eta_1, hat_mu_1, n_1, n_2, lambda));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LDWTL_matrix_inv", (DL_FUNC) &_LDWTL_matrix_inv, 1},
    {"_LDWTL_binom_ll_2", (DL_FUNC) &_LDWTL_binom_ll_2, 4},
    {"_LDWTL_binom_ll_2_deriv", (DL_FUNC) &_LDWTL_binom_ll_2_deriv, 4},
    {"_LDWTL_binom_KLdiv", (DL_FUNC) &_LDWTL_binom_KLdiv, 6},
    {"_LDWTL_binom_KLdiv_deriv", (DL_FUNC) &_LDWTL_binom_KLdiv_deriv, 6},
    {"_LDWTL_binom_min_func", (DL_FUNC) &_LDWTL_binom_min_func, 12},
    {"_LDWTL_binom_min_func_deriv", (DL_FUNC) &_LDWTL_binom_min_func_deriv, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_LDWTL(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
